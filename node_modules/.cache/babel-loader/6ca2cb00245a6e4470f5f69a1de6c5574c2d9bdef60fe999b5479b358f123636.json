{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n/**\n * validity 체크하는 hook\n * @param {\"username\" || \"password\"} type\n * @returns\n */\nconst useValidate = type => {\n  _s();\n  const [validity, setValidity] = useState(false);\n  const [warnList, setWarnList] = useState([]);\n  const oncheckValidity = text => {\n    const warnList = [];\n    if (!text) {\n      return setValidity(false);\n    }\n    const regexforValAuth = {\n      password: {\n        warnText: \"비밀번호는 8글자 이상이어야 합니다.\",\n        fn: new RegExp(\"(?=.{8,})\")\n      },\n      username: {\n        warnText: \"username(이메일)에는 @가 포함되어야 합니다.\",\n        fn: new RegExp(\"@\")\n      }\n    };\n    const {\n      warnText,\n      fn\n    } = regexforValAuth[type];\n    if (!fn.test(text)) {\n      warnList.push(warnText);\n    }\n    setWarnList(warnList);\n    if (warnList.length > 0) {\n      setValidity(false);\n    } else {\n      setValidity(true);\n    }\n  };\n  return [validity, warnList, oncheckValidity];\n};\n_s(useValidate, \"FgQsjnx1NoV828+KracV+MzXAzY=\");\nexport default useValidate;","map":{"version":3,"names":["useState","useValidate","type","_s","validity","setValidity","warnList","setWarnList","oncheckValidity","text","regexforValAuth","password","warnText","fn","RegExp","username","test","push","length"],"sources":["C:/Users/pokly/OneDrive/Desktop/경진/todo_nbcamp 2/src/hooks/useValidate.js"],"sourcesContent":["import { useState } from \"react\";\n\n/**\n * validity 체크하는 hook\n * @param {\"username\" || \"password\"} type\n * @returns\n */\nconst useValidate = (type) => {\n  const [validity, setValidity] = useState(false);\n  const [warnList, setWarnList] = useState([]);\n\n  const oncheckValidity = (text) => {\n    const warnList = [];\n    if (!text) {\n      return setValidity(false);\n    }\n    const regexforValAuth = {\n      password: {\n        warnText: \"비밀번호는 8글자 이상이어야 합니다.\",\n        fn: new RegExp(\"(?=.{8,})\"),\n      },\n      username: {\n        warnText: \"username(이메일)에는 @가 포함되어야 합니다.\",\n        fn: new RegExp(\"@\"),\n      },\n    };\n    const { warnText, fn } = regexforValAuth[type];\n    if (!fn.test(text)) {\n      warnList.push(warnText);\n    }\n\n    setWarnList(warnList);\n    if (warnList.length > 0) {\n      setValidity(false);\n    } else {\n      setValidity(true);\n    }\n  };\n  return [validity, warnList, oncheckValidity];\n};\n\nexport default useValidate;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,IAAI,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMQ,eAAe,GAAIC,IAAI,IAAK;IAChC,MAAMH,QAAQ,GAAG,EAAE;IACnB,IAAI,CAACG,IAAI,EAAE;MACT,OAAOJ,WAAW,CAAC,KAAK,CAAC;IAC3B;IACA,MAAMK,eAAe,GAAG;MACtBC,QAAQ,EAAE;QACRC,QAAQ,EAAE,sBAAsB;QAChCC,EAAE,EAAE,IAAIC,MAAM,CAAC,WAAW;MAC5B,CAAC;MACDC,QAAQ,EAAE;QACRH,QAAQ,EAAE,+BAA+B;QACzCC,EAAE,EAAE,IAAIC,MAAM,CAAC,GAAG;MACpB;IACF,CAAC;IACD,MAAM;MAAEF,QAAQ;MAAEC;IAAG,CAAC,GAAGH,eAAe,CAACR,IAAI,CAAC;IAC9C,IAAI,CAACW,EAAE,CAACG,IAAI,CAACP,IAAI,CAAC,EAAE;MAClBH,QAAQ,CAACW,IAAI,CAACL,QAAQ,CAAC;IACzB;IAEAL,WAAW,CAACD,QAAQ,CAAC;IACrB,IAAIA,QAAQ,CAACY,MAAM,GAAG,CAAC,EAAE;MACvBb,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACLA,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EACD,OAAO,CAACD,QAAQ,EAAEE,QAAQ,EAAEE,eAAe,CAAC;AAC9C,CAAC;AAACL,EAAA,CAhCIF,WAAW;AAkCjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}